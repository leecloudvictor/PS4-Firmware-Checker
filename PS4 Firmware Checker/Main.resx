<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAGAAAAQgAAAN4AAABaAAAAFgAAAAoAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAABWAAABKgAAAi4AAAMmAAADngAAAPYAAAGOAAACPgAAAQYAA
        AA+AAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAACgAAAlYAAAPqAAAD/gAAA/4AAAPWAAAA8gAAAhoAA
        AP+AAADzgAAAxYAAAH2AAAA2gAAACoAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAA
        AAOAAAAagAAAPYAAAGCAAAB5gAAAh4AAAIeAAAB8gAAAToAAAAaAAACpgAAA/4AAAP+AAAD/gAAA9YAA
        ADyAAAB9gAAA/4AAAP+AAAD/gAAA/4AAAO2AAAC5gAAAb4AAACuAAAAGgAAAAIAAAAAAAAAAAAAAAIAA
        AASAAABCgAAAnoAAANeAAADzgAAA+4AAAPeAAAD5gAAA/4AAAP+AAADAgAAADYAAAKmAAAD/gAAA/4AA
        AP+AAAD1gAAAPoAAABiAAABpgAAAtoAAAOyAAAD+gAAA/4AAAP+AAAD+gAAA5oAAAK2AAABdgAAAGIAA
        AACAAAAAgAAAZIAAAOyAAAD/gAAA/4AAAPiAAACBgAAAOYAAAD+AAABqgAAAtIAAAK2AAAANgAAAqYAA
        AP+AAAD/gAAA/4AAAPWAAAA/gAAACYAAAAWAAAAGgAAAMYAAAHuAAADFgAAA84AAAP+AAAD/gAAA/4AA
        APqAAADQgAAAbYAAAA6AAACIgAAA/IAAAP+AAAD/gAAA/YAAAMiAAABwgAAAKoAAAASAAAAGgAAAHIAA
        AAaAAACpgAAA/4AAAP+AAAD/gAAA9YAAAD2AAABygAAAs4AAAGOAAAAhgAAAAoAAAAyAAAA/gAAAjoAA
        ANeAAAD9gAAA/4AAAP+AAAD5gAAAfYAAABSAAAB/gAAA4YAAAP6AAAD/gAAA/4AAAP6AAADogAAAsIAA
        AGSAAAAfgAAAA4AAAKmAAAD/gAAA/4AAAP+AAAD1gAAAPIAAAIaAAAD/gAAA/IAAAOGAAACjgAAAWIAA
        ACOAAAAVgAAAV4AAAOqAAAD/gAAA/4AAAPqAAAB/gAAAAIAAAAKAAAAogAAAdYAAAMKAAADygAAA/4AA
        AP+AAAD/gAAA/4AAAK+AAAALgAAAqYAAAP+AAAD/gAAA/4AAAPWAAAA8gAAAd4AAAPqAAAD/gAAA/4AA
        AP+AAAD9gAAA6IAAANmAAADsgAAA/oAAAPWAAADLgAAAbIAAAA8AAAAAAAAAAIAAAACAAAAAgAAADoAA
        AD+AAACJgAAAz4AAAPeAAAD/gAAAwIAAAA2AAACpgAAA/4AAAP+AAAD/gAAA9YAAAD6AAAAQgAAARoAA
        AHWAAACbgAAAtIAAAMGAAADFgAAAvoAAAKSAAAB6gAAARIAAABOAAAAAgAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAIAAAAGAAAAVgAAATYAAAJyAAACdgAAADIAAAKmAAAD/gAAA/4AAAP+AAAD1gAAAP4AA
        AACAAAANgAAAOIAAAFSAAAA6gAAAD4AAAAuAAAAIgAAAAoAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAA4AAAA+AAAAEgAAAqYAAAP+AAAD/gAAA/4AA
        APWAAAA+gAAAA4AAAJ6AAAD1gAAA/IAAAOyAAACAgAAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAOAAACpgAAA/4AA
        AP+AAAD/gAAA9YAAAD6AAAAHgAAAwYAAAP+AAAD/gAAA/4AAAPaAAABWgAAAAIAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAA4AA
        AKmAAAD/gAAA/4AAAP+AAAD1gAAAPoAAAAaAAADBgAAA/4AAAP+AAAD/gAAA/4AAAKWAAAADgAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AACAAAADgAAAqYAAAP+AAAD/gAAA/4AAAPWAAAA+gAAABoAAAMGAAAD/gAAA/4AAAP+AAAD/gAAAyIAA
        AA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAIAAAAOAAACpgAAA/4AAAP+AAAD/gAAA9YAAAD6AAAAGgAAAwYAAAP+AAAD/gAAA/4AA
        AP+AAADPgAAAEoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAAAgAAAA4AAAKmAAAD/gAAA/4AAAP+AAAD1gAAAPoAAAAaAAADBgAAA/4AA
        AP+AAAD/gAAA/4AAAMaAAAANgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAADgAAAqYAAAP+AAAD/gAAA/4AAAPWAAAA+gAAABoAA
        AMCAAAD/gAAA/4AAAP+AAAD/gAAAqYAAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAOAAACpgAAA/4AAAP+AAAD/gAAA9YAA
        AD6AAAAHgAAAwYAAAP+AAAD/gAAA/4AAAP6AAABtgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAA4AAAKmAAAD/gAAA/4AA
        AP+AAAD2gAAAQIAAABCAAADPgAAA/4AAAP+AAAD/gAAAzIAAAB6AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAADgAAAqYAA
        AP+AAAD/gAAA/4AAAP6AAACNgAAAgYAAAPeAAAD/gAAA/4AAANyAAABCgAAAAIAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAA
        AAOAAACpgAAA/4AAAP+AAAD/gAAA/4AAAP2AAAD9gAAA/4AAAPWAAACwgAAANIAAAACAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACAAAAAgAAAA4AAAKmAAAD/gAAA/4AAAP+AAAD/gAAA+4AAAN6AAACigAAATIAAAAyAAAAAgAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIAAAACAAAADgAAAqoAAAP+AAADygAAA0IAAAJmAAABXgAAAIYAAAASAAAAAgAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAKAAABlgAAAc4AAADyAAAAVgAAAAoAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////wP///wA///4AB/wAAADwAAAAMAAAAAAAAAAAAA
        AACAAAAA8AAAA/wAIB//gAB//+AAf//gAD//4AA//+AAP//gAD//4AA//+AAf//gAH//4AD//+AB///g
        A///4A///+B///////////////////////8=
</value>
  </data>
</root>